Index: src/main/resources/data/crabbersdelight/loot_tables/gameplay/crab_trap_loot/minecraft/junk.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\r\n  \"type\": \"minecraft:fishing\",\r\n  \"pools\": [\r\n    {\r\n      \"rolls\": 1,\r\n      \"bonus_rolls\": 0,\r\n      \"entries\": [\r\n        {\r\n          \"type\": \"minecraft:item\",\r\n          \"weight\": 1,\r\n          \"name\": \"crabbersdelight:crab\"\r\n        },\r\n        {\r\n          \"type\": \"minecraft:item\",\r\n          \"weight\": 1,\r\n          \"name\": \"crabbersdelight:clawster\"\r\n        },\r\n        {\r\n          \"type\": \"minecraft:item\",\r\n          \"weight\": 1,\r\n          \"name\": \"crabbersdelight:shrimp\"\r\n        },\r\n        {\r\n          \"type\": \"minecraft:item\",\r\n          \"weight\": 1,\r\n          \"name\": \"crabbersdelight:clam\"\r\n        },\r\n        {\r\n          \"type\": \"minecraft:item\",\r\n          \"weight\": 4,\r\n          \"name\": \"minecraft:stick\"\r\n        },\r\n        {\r\n          \"type\": \"minecraft:item\",\r\n          \"weight\": 1,\r\n          \"name\": \"minecraft:nautilus_shell\"\r\n        },\r\n        {\r\n          \"type\": \"minecraft:item\",\r\n          \"weight\": 3,\r\n          \"name\": \"farmersdelight:rope\"\r\n        },\r\n        {\r\n          \"type\": \"minecraft:item\",\r\n          \"weight\": 5,\r\n          \"name\": \"minecraft:kelp\"\r\n        },\r\n        {\r\n          \"type\": \"minecraft:item\",\r\n          \"weight\": 1,\r\n          \"name\": \"minecraft:iron_ingot\"\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/data/crabbersdelight/loot_tables/gameplay/crab_trap_loot/minecraft/junk.json b/src/main/resources/data/crabbersdelight/loot_tables/gameplay/crab_trap_loot/minecraft/junk.json
--- a/src/main/resources/data/crabbersdelight/loot_tables/gameplay/crab_trap_loot/minecraft/junk.json	(revision 5db1bf33ee5ad0a342b9a46687fee491f555271a)
+++ b/src/main/resources/data/crabbersdelight/loot_tables/gameplay/crab_trap_loot/minecraft/junk.json	(date 1694730530929)
@@ -44,11 +44,6 @@
           "type": "minecraft:item",
           "weight": 5,
           "name": "minecraft:kelp"
-        },
-        {
-          "type": "minecraft:item",
-          "weight": 1,
-          "name": "minecraft:iron_ingot"
         }
       ]
     }
Index: src/main/java/alabaster/crabbersdelight/common/block/entity/CrabTrapBlockEntity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package alabaster.crabbersdelight.common.block.entity;\r\n\r\nimport alabaster.crabbersdelight.CrabbersDelight;\r\nimport alabaster.crabbersdelight.common.Config;\r\nimport alabaster.crabbersdelight.common.block.container.CrabTrapMenu;\r\nimport alabaster.crabbersdelight.common.block.entity.inventory.CrabTrapItemHandler;\r\nimport alabaster.crabbersdelight.common.registry.ModBlockEntity;\r\nimport alabaster.crabbersdelight.common.tags.CDModTags;\r\nimport com.mojang.datafixers.util.Pair;\r\nimport net.minecraft.core.BlockPos;\r\nimport net.minecraft.core.Direction;\r\nimport net.minecraft.nbt.CompoundTag;\r\nimport net.minecraft.network.Connection;\r\nimport net.minecraft.network.chat.Component;\r\nimport net.minecraft.network.protocol.game.ClientboundBlockEntityDataPacket;\r\nimport net.minecraft.resources.ResourceLocation;\r\nimport net.minecraft.server.level.ServerLevel;\r\nimport net.minecraft.sounds.SoundEvents;\r\nimport net.minecraft.sounds.SoundSource;\r\nimport net.minecraft.tags.FluidTags;\r\nimport net.minecraft.util.RandomSource;\r\nimport net.minecraft.world.MenuProvider;\r\nimport net.minecraft.world.Nameable;\r\nimport net.minecraft.world.entity.player.Inventory;\r\nimport net.minecraft.world.entity.player.Player;\r\nimport net.minecraft.world.inventory.AbstractContainerMenu;\r\nimport net.minecraft.world.item.ItemStack;\r\nimport net.minecraft.world.item.Items;\r\nimport net.minecraft.world.level.Level;\r\nimport net.minecraft.world.level.block.entity.BlockEntity;\r\nimport net.minecraft.world.level.block.state.BlockState;\r\nimport net.minecraft.world.level.storage.loot.LootParams;\r\nimport net.minecraft.world.level.storage.loot.LootTable;\r\nimport net.minecraft.world.level.storage.loot.parameters.LootContextParamSets;\r\nimport net.minecraft.world.level.storage.loot.parameters.LootContextParams;\r\nimport net.minecraft.world.phys.Vec3;\r\nimport net.minecraftforge.common.capabilities.Capability;\r\nimport net.minecraftforge.common.capabilities.ForgeCapabilities;\r\nimport net.minecraftforge.common.util.LazyOptional;\r\nimport net.minecraftforge.items.IItemHandler;\r\nimport net.minecraftforge.items.wrapper.RangedWrapper;\r\nimport net.minecraftforge.registries.ForgeRegistries;\r\nimport org.jetbrains.annotations.Nullable;\r\n\r\nimport javax.annotation.Nonnull;\r\nimport java.util.List;\r\nimport java.util.Objects;\r\n\r\npublic class CrabTrapBlockEntity extends BlockEntity implements MenuProvider, Nameable {\r\n\r\n    public static final Component CRAB_TRAP_NAME = Component.translatable(\"block.crabbersdelight.crab_trap\");\r\n\r\n    private final CrabTrapItemHandler inventory = new CrabTrapItemHandler() {\r\n        @Override\r\n        protected void onContentsChanged(int slot) {\r\n            setChanged();\r\n        }\r\n    };\r\n\r\n    private final LazyOptional<IItemHandler> input = LazyOptional.of(() -> new RangedWrapper(this.inventory, 0, 0));\r\n    private final LazyOptional<IItemHandler> output = LazyOptional.of(() -> new RangedWrapper(this.inventory, 1, 19));\r\n    private int tickCounter = 0;\r\n\r\n    public CrabTrapBlockEntity(BlockPos pos, BlockState state) {\r\n        super(ModBlockEntity.CRAB_TRAP.get(), pos, state);\r\n    }\r\n\r\n    @Override\r\n    protected void saveAdditional(CompoundTag tag) {\r\n        super.saveAdditional(tag);\r\n        tag.put(\"handler\", this.inventory.serializeNBT());\r\n        tag.putInt(\"tickCounter\", tickCounter);\r\n    }\r\n\r\n    @Override\r\n    public void load(CompoundTag tag) {\r\n        super.load(tag);\r\n        this.inventory.deserializeNBT(tag.getCompound(\"handler\"));\r\n        this.tickCounter = tag.getInt(\"tickCounter\");\r\n    }\r\n\r\n    private CompoundTag saveItems(CompoundTag compound) {\r\n        super.saveAdditional(compound);\r\n        compound.put(\"handler\", this.inventory.serializeNBT());\r\n        return compound;\r\n    }\r\n\r\n    @Nullable\r\n    public ClientboundBlockEntityDataPacket getUpdatePacket() {\r\n        return ClientboundBlockEntityDataPacket.create(this);\r\n    }\r\n\r\n    @Override\r\n    public CompoundTag getUpdateTag() {\r\n        return this.saveItems(new CompoundTag());\r\n    }\r\n\r\n    @Override\r\n    public void onDataPacket(Connection net, ClientboundBlockEntityDataPacket packet) {\r\n        this.load(packet.getTag());\r\n    }\r\n\r\n    public static Pair<Integer, Integer> getMinMax() {\r\n        return Pair.of(Config.MIN_TICKS.get(), Config.MAX_TICKS.get());\r\n    }\r\n\r\n    public static void serverTick(Level level, BlockPos pos, BlockState state, CrabTrapBlockEntity blockEntity) {\r\n        RandomSource random = level.getRandom();\r\n        if (getMinMax().getSecond() > getMinMax().getFirst()) {\r\n            if (blockEntity.tickCounter >= random.nextIntBetweenInclusive(getMinMax().getFirst(), getMinMax().getSecond())) {\r\n                blockEntity.tickCounter = 0;\r\n                if (isValidFishingLocation(level, pos)) {\r\n                    LootParams lootparams = (new LootParams.Builder((ServerLevel) level))\r\n                            .withParameter(LootContextParams.ORIGIN, new Vec3(pos.getX(), pos.getY(), pos.getZ()))\r\n                            .withParameter(LootContextParams.TOOL, ItemStack.EMPTY)\r\n                            .withParameter(LootContextParams.BLOCK_ENTITY, blockEntity)\r\n                            .create(LootContextParamSets.FISHING);\r\n                    ItemStack itemInBaitSlot = blockEntity.inventory.getStackInSlot(0);\r\n                    LootTable loottable;\r\n                    level.playSound(null, pos.getX() + 0.5F, pos.getY() + 0.5F, pos.getZ() + 0.5F, SoundEvents.FISH_SWIM, SoundSource.BLOCKS, 0.5F, 1.0F);\r\n\r\n                    if (itemInBaitSlot.is(CDModTags.CRAB_TRAP_BAIT) && !itemInBaitSlot.is(Items.AIR)) {\r\n                        ResourceLocation registryName = ForgeRegistries.ITEMS.getKey(itemInBaitSlot.getItem());\r\n                        ResourceLocation lootTableLocation = CrabbersDelight.modPrefix(\"gameplay/crab_trap_loot/\" + Objects.requireNonNull(registryName).getNamespace() + \"/\" + registryName.getPath());\r\n                        loottable = level.getServer().getLootData().getLootTable(lootTableLocation);\r\n                    } else {\r\n                        if (isTreasureFishingLocation(level, pos)) {\r\n                            ResourceLocation lootTableLocation = CrabbersDelight.modPrefix(\"gameplay/crab_trap_loot/minecraft/treasure\");\r\n                            loottable = level.getServer().getLootData().getLootTable(lootTableLocation);\r\n                        }\r\n                        else {\r\n                            ResourceLocation lootTableLocation = CrabbersDelight.modPrefix(\"gameplay/crab_trap_loot/minecraft/junk\");\r\n                            loottable = level.getServer().getLootData().getLootTable(lootTableLocation);\r\n                        }\r\n                    }\r\n\r\n                    List<ItemStack> list = loottable.getRandomItems(lootparams);\r\n                    blockEntity.inventory.addItemsAndShrinkBait(list, itemInBaitSlot);\r\n                }\r\n\r\n            } else {\r\n                blockEntity.tickCounter++;\r\n            }\r\n        } else {\r\n            CrabbersDelight.LOGGER.error(\"Error: Miniumum value is higher than maximum value!\");\r\n        }\r\n    }\r\n\r\n    private static boolean isValidFishingLocation(Level level, BlockPos pos) {\r\n        for (Direction direction : Direction.values()) {\r\n            if (level.getBlockState(pos).getFluidState().is(FluidTags.WATER)) {\r\n                if (level.getFluidState(pos.relative(direction)).is(FluidTags.WATER)) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private static boolean isTreasureFishingLocation(Level level, BlockPos pos) {\r\n        for (BlockPos nearbyPos : BlockPos.betweenClosed(pos.offset(-2, 0, -2), pos.offset(2, 2, 2))) {\r\n            if (!level.getFluidState(nearbyPos).is(FluidTags.WATER)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n        @Override\r\n    @Nonnull\r\n    public <T> LazyOptional<T> getCapability(Capability<T> cap, @Nullable Direction side) {\r\n        if (cap.equals(ForgeCapabilities.ITEM_HANDLER)) {\r\n            if (side == null || side.equals(Direction.UP)) {\r\n                return input.cast();\r\n            } else {\r\n                return output.cast();\r\n            }\r\n        }\r\n        return super.getCapability(cap, side);\r\n    }\r\n\r\n    public CrabTrapItemHandler getInventory() {\r\n        return this.inventory;\r\n    }\r\n\r\n    @Override\r\n    public Component getName() {\r\n        return CRAB_TRAP_NAME;\r\n    }\r\n\r\n    @Override\r\n    public Component getDisplayName() {\r\n        return CRAB_TRAP_NAME;\r\n    }\r\n\r\n    @Nullable\r\n    @Override\r\n    public AbstractContainerMenu createMenu(int id, Inventory playerInv, Player player) {\r\n        return new CrabTrapMenu(id, playerInv, this.inventory);\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/alabaster/crabbersdelight/common/block/entity/CrabTrapBlockEntity.java b/src/main/java/alabaster/crabbersdelight/common/block/entity/CrabTrapBlockEntity.java
--- a/src/main/java/alabaster/crabbersdelight/common/block/entity/CrabTrapBlockEntity.java	(revision 5db1bf33ee5ad0a342b9a46687fee491f555271a)
+++ b/src/main/java/alabaster/crabbersdelight/common/block/entity/CrabTrapBlockEntity.java	(date 1694730570823)
@@ -166,7 +166,7 @@
         return true;
     }
 
-        @Override
+    @Override
     @Nonnull
     public <T> LazyOptional<T> getCapability(Capability<T> cap, @Nullable Direction side) {
         if (cap.equals(ForgeCapabilities.ITEM_HANDLER)) {
Index: src/main/resources/data/crabbersdelight/loot_tables/gameplay/crab_trap_loot/minecraft/treasure.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\r\n  \"type\": \"minecraft:fishing\",\r\n  \"pools\": [\r\n    {\r\n      \"rolls\": 1,\r\n      \"bonus_rolls\": 0,\r\n      \"entries\": [\r\n        {\r\n          \"type\": \"minecraft:item\",\r\n          \"weight\": 1,\r\n          \"name\": \"minecraft:gold_ingot\"\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/data/crabbersdelight/loot_tables/gameplay/crab_trap_loot/minecraft/treasure.json b/src/main/resources/data/crabbersdelight/loot_tables/gameplay/crab_trap_loot/minecraft/treasure.json
--- a/src/main/resources/data/crabbersdelight/loot_tables/gameplay/crab_trap_loot/minecraft/treasure.json	(revision 5db1bf33ee5ad0a342b9a46687fee491f555271a)
+++ b/src/main/resources/data/crabbersdelight/loot_tables/gameplay/crab_trap_loot/minecraft/treasure.json	(date 1694730530940)
@@ -6,9 +6,54 @@
       "bonus_rolls": 0,
       "entries": [
         {
+          "type": "minecraft:item",
+          "weight": 5,
+          "name": "crabbersdelight:crab"
+        },
+        {
+          "type": "minecraft:item",
+          "weight": 5,
+          "name": "crabbersdelight:clawster"
+        },
+        {
+          "type": "minecraft:item",
+          "weight": 5,
+          "name": "crabbersdelight:shrimp"
+        },
+        {
+          "type": "minecraft:item",
+          "weight": 5,
+          "name": "crabbersdelight:clam"
+        },
+        {
+          "type": "minecraft:item",
+          "weight": 3,
+          "name": "minecraft:stick"
+        },
+        {
+          "type": "minecraft:item",
+          "weight": 4,
+          "name": "minecraft:nautilus_shell"
+        },
+        {
+          "type": "minecraft:item",
+          "weight": 3,
+          "name": "farmersdelight:rope"
+        },
+        {
+          "type": "minecraft:item",
+          "weight": 1,
+          "name": "minecraft:gold_nugget"
+        },
+        {
           "type": "minecraft:item",
           "weight": 1,
-          "name": "minecraft:gold_ingot"
+          "name": "minecraft:copper_ingot"
+        },
+        {
+          "type": "minecraft:item",
+          "weight": 1,
+          "name": "minecraft:iron_nugget"
         }
       ]
     }
